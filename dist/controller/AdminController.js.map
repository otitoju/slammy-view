{"version":3,"sources":["../../server/controller/AdminController.js"],"names":["AdminController","req","res","body","username","password","email","console","log","status","json","STATUS","STATUS_BAD_REQUEST","code","MESSAGE","response","hashed","bcrypt","hashSync","data","AdminService","createAdmin","save","STATUS_CREATED","error","message","STATUS_SERVER_ERROR","Admin","getAdminEmail","STATUS_NOTFOUND","passwordIsValid","compareSync","token","jwt","sign","id","_id","config","LOGIN_SECRET","expiresIn","STATUS_OK","Token","getAdmins","length","info","adminId","params","getAdmin","deleteAdmin"],"mappings":"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","file":"AdminController.js","sourcesContent":["import AdminService from \"../services/AdminService\";\r\nimport { Tracer } from \"../utils/Logger\";\r\nimport STATUS from \"../utils/HttpResponse\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../utils/config\";\r\n\r\n\r\nexport default class AdminController {\r\n    static async NewAdmin(req, res) {\r\n        try {\r\n            const { username, password, email } = req.body;\r\n            console.log(req.body);\r\n            if(!username || !password || !email) {\r\n                return res.status(400).json({\r\n                    STATUS: STATUS.STATUS_BAD_REQUEST.code,\r\n                    MESSAGE: STATUS.STATUS_BAD_REQUEST.response\r\n                });\r\n            }\r\n            else {\r\n                const hashed = bcrypt.hashSync(password, 10);\r\n                const data = await AdminService.createAdmin(req.body);\r\n                data.password = hashed;\r\n                await data.save();\r\n                return res.status(201).json({\r\n                    STATUS: STATUS.STATUS_CREATED.code,\r\n                    MESSAGE: STATUS.STATUS_CREATED.response\r\n                });\r\n            }\r\n        } catch (error) {\r\n            Tracer(\"CREATE ADMIN\", error.message, error);\r\n            return res.status(500).json({\r\n                STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n                MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    static async LoginAdmin(req, res) {\r\n        try {\r\n            const { email, password } = req.body;\r\n            if(!email || !password) {\r\n                return res.status(400).json({\r\n                    STATUS: STATUS.STATUS_BAD_REQUEST.code,\r\n                    MESSAGE: STATUS.STATUS_BAD_REQUEST.response\r\n                });\r\n            }\r\n            else {\r\n                let Admin = await AdminService.getAdminEmail(email);\r\n                if(!Admin) {\r\n                    return res.status(404).json({\r\n                        STATUS: STATUS.STATUS_NOTFOUND.code,\r\n                        MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n                    });\r\n                }\r\n                else {\r\n                    const passwordIsValid = bcrypt.compareSync(password, Admin.password);\r\n                    if(!passwordIsValid) {\r\n                        return res.status(404).json({\r\n                            STATUS: STATUS.STATUS_NOTFOUND.code,\r\n                            MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n                        });\r\n                    }\r\n                    else {\r\n                        const token = await jwt.sign({ id: Admin._id, email: Admin.email, username: Admin.username }, config.LOGIN_SECRET, {expiresIn: 8600});\r\n                        return res.status(200).json({\r\n                            STATUS: STATUS.STATUS_OK.code,\r\n                            MESSAGE: STATUS.STATUS_OK.response,\r\n                            Token: token\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            Tracer(\"LOGIN ADMIN\", error.message, error);\r\n            return res.status(500).json({\r\n                STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n                MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n            });\r\n        }\r\n    }\r\n\r\n    static async GetAdmins(req, res) {\r\n        try {\r\n            const data = await AdminService.getAdmins();\r\n            if(data.length > 0) {\r\n                return res.status(200).json({\r\n                    info: data\r\n                });\r\n            }\r\n            else {\r\n                return res.status(404).json({\r\n                    STATUS: STATUS.STATUS_NOTFOUND.code,\r\n                    MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n                });\r\n            }\r\n        } catch (error) {\r\n            Tracer(\"RETURN ADMIN\", error.message, error);\r\n            return res.status(500).json({\r\n                STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n                MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n            });\r\n        }\r\n    }\r\n\r\n    static async GetAdmin(req, res) {\r\n        try {\r\n            const { adminId } = req.params;\r\n            const data = await AdminService.getAdmin(adminId);\r\n            if(data) {\r\n                return res.status(200).json({\r\n                    info: data\r\n                });\r\n            }\r\n            else {\r\n                return res.status(404).json({\r\n                    STATUS: STATUS.STATUS_NOTFOUND.code,\r\n                    MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n                });\r\n            }\r\n        } catch (error) {\r\n            Tracer(\"RETURN ADMIN\", error.message, error);\r\n            return res.status(500).json({\r\n                STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n                MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n            });\r\n        }\r\n    }\r\n\r\n    static async DeleteAdmin(req, res) {\r\n        try {\r\n            const { adminId } = req.params;\r\n            const data = await AdminService.deleteAdmin(adminId);\r\n            if(data) {\r\n                return res.status(200).json({\r\n                    info: data\r\n                });\r\n            }\r\n            else {\r\n                return res.status(404).json({\r\n                    STATUS: STATUS.STATUS_NOTFOUND.code,\r\n                    MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n                });\r\n            }\r\n        } catch (error) {\r\n            Tracer(\"DELETE ADMIN\", error.message, error);\r\n            return res.status(500).json({\r\n                STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n                MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n            }); \r\n        }\r\n    }\r\n}\r\n"]}