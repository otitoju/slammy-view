{"version":3,"sources":["../../server/controller/MessageController.js"],"names":["nodemailer","require","main","testAccount","createTestAccount","transporter","createTransport","host","port","secure","auth","user","pass","info","sendMail","from","to","subject","text","html","console","log","messageId","getTestMessageUrl","MessageController","req","res","body","sender","email","phone","message","status","json","STATUS","STATUS_BAD_REQUEST","code","MESSAGE","response","Model","create","STATUS_CREATED","error","STATUS_SERVER_ERROR","data","find","sort","length","STATUS_NOTFOUND","params","findOne","_id","findOneAndRemove","Message"],"mappings":"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","file":"MessageController.js","sourcesContent":["import Model from \"../model/Message\";\r\nimport { Tracer } from \"../utils/Logger\";\r\nimport STATUS from \"../utils/HttpResponse\";\r\nconst nodemailer = require(\"nodemailer\");\r\n\r\nasync function main() {\r\n    // Generate test SMTP service account from ethereal.email\r\n    // Only needed if you don't have a real mail account for testing\r\n    let testAccount = await nodemailer.createTestAccount();\r\n    \r\n    //console.log(testAccount)\r\n    // create reusable transporter object using the default SMTP transport\r\n    let transporter = nodemailer.createTransport({\r\n      host: \"smtp.ethereal.email\",\r\n      port: 587,\r\n      secure: false, // true for 465, false for other ports\r\n      auth: {\r\n        user: testAccount.user, // generated ethereal user\r\n        pass: testAccount.pass, // generated ethereal password\r\n      },\r\n    });\r\n  \r\n    // send mail with defined transport object\r\n    let info = await transporter.sendMail({\r\n      from: '\"Fred Foo ðŸ‘»\" <foo@example.com>', // sender address\r\n      to: \"bar@example.com, baz@example.com\", // list of receivers\r\n      subject: \"Hello âœ”\", // Subject line\r\n      text: \"Hello world?\", // plain text body\r\n      html: \"<b>Hello world?</b>\", // html body\r\n    });\r\n  \r\n    console.log(\"Message sent: %s\", info.messageId);\r\n    // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n  \r\n    // Preview only available when sending through an Ethereal account\r\n    console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\r\n    // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n  }\r\n\r\nexport default class MessageController {\r\n  static async SendMessage(req, res) {\r\n    try {\r\n        const { sender, email, phone, message } = req.body;\r\n        if(!sender || !email || !phone || !message) {\r\n            return res.status(400).json({\r\n                STATUS: STATUS.STATUS_BAD_REQUEST.code,\r\n                MESSAGE: STATUS.STATUS_BAD_REQUEST.response,\r\n            });\r\n        }\r\n        else {\r\n            const info = await Model.create(req.body);\r\n            //await main();\r\n            return res.status(201).json({\r\n                STATUS: STATUS.STATUS_CREATED.code,\r\n                MESSAGE: STATUS.STATUS_CREATED.response,\r\n                info: info,\r\n              });\r\n        }\r\n    } catch (error) {\r\n      Tracer(\"Send mail\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async GetMessages(req, res) {\r\n    try {\r\n        const data = await Model.find({}).sort( {\"_id\": -1 });\r\n      if (data.length > 0) {\r\n        return res.status(200).json({\r\n          info: data,\r\n        });\r\n      }\r\n      else {\r\n        return res.status(404).json({\r\n            STATUS: STATUS.STATUS_NOTFOUND.code,\r\n            MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Tracer(\"Get mails\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async GetMessage(req, res) {\r\n    try {\r\n      const { messageId } = req.params;\r\n      const data = await Model.findOne({ _id: messageId });\r\n      if (data) {\r\n        return res.status(200).json({\r\n          info: data,\r\n        });\r\n      } else {\r\n        return res.status(404).json({\r\n          STATUS: STATUS.STATUS_NOTFOUND.code,\r\n          MESSAGE: STATUS.STATUS_NOTFOUND.response,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Tracer(\"GetMessage\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async DeleteMessage(req, res) {\r\n    try {\r\n      const { messageId } = req.params;\r\n      const data = await Model.findOneAndRemove({ _id: messageId });\r\n      if (data) {\r\n        return res.status(200).json({\r\n          Message: \"DELETED\"\r\n        });\r\n      } else {\r\n        return res.status(404).json({\r\n          STATUS: STATUS.STATUS_NOTFOUND.code,\r\n          MESSAGE: STATUS.STATUS_NOTFOUND.response,\r\n        });\r\n      } \r\n    } catch (error) {\r\n      Tracer(\"GetMessage\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}