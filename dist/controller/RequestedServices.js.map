{"version":3,"sources":["../../server/controller/RequestedServices.js"],"names":["RequestedServiceController","req","res","body","fname","lname","phone","email","qty","service","status","json","STATUS","STATUS_BAD_REQUEST","code","MESSAGE","response","info","RequestedServices","create","STATUS_CREATED","error","message","STATUS_SERVER_ERROR","data","find","sort","_id","length","STATUS_NOTFOUND","requestId","params","findOne","findOneAndRemove","save","STATUS_OK"],"mappings":"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","file":"RequestedServices.js","sourcesContent":["import RequestedServices from \"../model/RequestedServices\";\r\nimport { Tracer } from \"../utils/Logger\";\r\nimport STATUS from \"../utils/HttpResponse\";\r\nimport cloudinary from 'cloudinary';\r\n\r\nexport default class RequestedServiceController {\r\n  static async NewRequest(req, res) {\r\n    try {\r\n      const { fname, lname, phone, email, qty, service } = req.body;\r\n      if (!fname || !lname || !phone || !email || !qty || !service) {\r\n        return res.status(400).json({\r\n          STATUS: STATUS.STATUS_BAD_REQUEST.code,\r\n          MESSAGE: STATUS.STATUS_BAD_REQUEST.response,\r\n        });\r\n      }\r\n      else {\r\n        const info = await RequestedServices.create(req.body);\r\n        return res.status(201).json({\r\n            STATUS: STATUS.STATUS_CREATED.code,\r\n            MESSAGE: STATUS.STATUS_CREATED.response,\r\n            info: info,\r\n          });\r\n      }\r\n    } catch (error) {\r\n      Tracer(\"New Request\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async AllRequests(req, res) {\r\n    try {\r\n        const data = await RequestedServices.find({}).sort({ _id: -1 });\r\n      if (data.length > 0) {\r\n        return res.status(200).json({\r\n          info: data,\r\n        });\r\n      }\r\n      else {\r\n        return res.status(404).json({\r\n            STATUS: STATUS.STATUS_NOTFOUND.code,\r\n            MESSAGE: STATUS.STATUS_NOTFOUND.response\r\n        });\r\n      }\r\n    } catch (error) {\r\n        Tracer(\"Requests\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async GetRequest(req, res) {\r\n    try {\r\n      const { requestId } = req.params;\r\n      const data = await RequestedServices.findOne({ _id: requestId });\r\n      if (data) {\r\n        return res.status(200).json({\r\n          info: data,\r\n        });\r\n      } else {\r\n        return res.status(404).json({\r\n          STATUS: STATUS.STATUS_NOTFOUND.code,\r\n          MESSAGE: STATUS.STATUS_NOTFOUND.response,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Tracer(\"Get Request\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async DeleteRequest(req, res) {\r\n    try {\r\n      const { requestId } = req.params;\r\n      const data = await RequestedServices.findOneAndRemove({ _id: requestId });\r\n      if (data) {\r\n        return res.status(200).json({\r\n          info: data,\r\n        });\r\n      } else {\r\n        return res.status(404).json({\r\n          STATUS: STATUS.STATUS_NOTFOUND.code,\r\n          MESSAGE: STATUS.STATUS_NOTFOUND.response,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Tracer(\"Delete Request\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async UpdateRequest(req, res) {\r\n    try {\r\n      const { requestId } = req.params;\r\n      const data = await RequestedServices.findOne({ _id: requestId });\r\n      if (data) {\r\n        const { status } = req.body;\r\n\r\n        data.status = status || data.status;\r\n        \r\n        await data.save();\r\n        return res.status(200).json({\r\n            STATUS: STATUS.STATUS_OK.code,\r\n            MESSAGE: STATUS.STATUS_OK.response,\r\n        });\r\n      }\r\n      else {\r\n        return res.status(404).json({\r\n            STATUS: STATUS.STATUS_NOTFOUND.code,\r\n            MESSAGE: STATUS.STATUS_NOTFOUND.response,\r\n          });\r\n      }\r\n    } catch (error) {\r\n      Tracer(\"Update Service\", error.message, error);\r\n      return res.status(500).json({\r\n        STATUS: STATUS.STATUS_SERVER_ERROR.code,\r\n        MESSAGE: STATUS.STATUS_SERVER_ERROR.response,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]}